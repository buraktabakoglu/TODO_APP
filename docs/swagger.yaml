basePath: /
definitions:
  models.Todo:
    properties:
      author:
        $ref: '#/definitions/models.User'
      author_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      nickname:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server todo server. You can visit the GitHub repository
    at https://github.com/LordGhostX/swag-gin-demo
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Go + Gin Todo API
  version: "1.0"
paths:
  /api/todos:
    get:
      description: Get All TODOs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
      security:
      - JWT: []
      summary: Get Todos
  /api/todos/{id}:
    delete:
      description: Delete TODO by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
      security:
      - JWT: []
      summary: Delete Todo
    get:
      description: Get a TODO by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
      security:
      - JWT: []
      summary: Get Todo
    post:
      description: Add a new Todo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
      security:
      - JWT: []
      summary: Create Todo
  /api/users:
    get:
      operationId: get-users-by-id
      parameters:
      - description: users ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: get a users item by ID
  /api/users/{id}:
    delete:
      operationId: delete-users-by-id
      parameters:
      - description: users ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: delete a users item by ID
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Retrieves user based on given ID
    patch:
      operationId: patch-todo-by-id
      parameters:
      - description: users ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: patch a users item by ID
    post:
      description: Add a new User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Register User
swagger: "2.0"
